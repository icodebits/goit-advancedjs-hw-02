{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\nlet timerId = null;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0];\n        if (selectedDate <= new Date()) {\n            startButton.disabled = true;\n            iziToast.error({ title: 'Error', message: 'Please choose a date in the future' });\n        } else {\n            startButton.disabled = false;\n            startButton.addEventListener('click', () => startCountdown(selectedDate));\n        }\n    },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction startCountdown(endDate) {\n    startButton.disabled = true;\n    if (timerId) {\n        clearInterval(timerId);\n    }\n    timerId = setInterval(() => {\n        const now = new Date();\n        const timeLeft = endDate - now;\n\n        if (timeLeft <= 0) {\n            clearInterval(timerId);\n            updateTimerUI(0, 0, 0, 0);\n            return;\n        }\n\n        const { days, hours, minutes, seconds } = convertMs(timeLeft);\n        updateTimerUI(days, hours, minutes, seconds);\n    }, 1000);\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerUI(days, hours, minutes, seconds) {\n    daysSpan.textContent = addLeadingZero(days);\n    hoursSpan.textContent = addLeadingZero(hours);\n    minutesSpan.textContent = addLeadingZero(minutes);\n    secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n"],"names":["startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","timerId","options","selectedDates","selectedDate","iziToast","startCountdown","flatpickr","endDate","timeLeft","updateTimerUI","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"0IAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC3D,IAAIC,EAAU,KAEd,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACpBR,EAAY,SAAW,GACvBS,EAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,IAEhFT,EAAY,SAAW,GACvBA,EAAY,iBAAiB,QAAS,IAAMU,EAAeF,CAAY,CAAC,EAE/E,CACL,EAEAG,EAAU,mBAAoBL,CAAO,EAErC,SAASI,EAAeE,EAAS,CAC7BZ,EAAY,SAAW,GACnBK,GACA,cAAcA,CAAO,EAEzBA,EAAU,YAAY,IAAM,CAExB,MAAMQ,EAAWD,EADL,IAAI,KAGhB,GAAIC,GAAY,EAAG,CACf,cAAcR,CAAO,EACrBS,EAAc,EAAG,EAAG,EAAG,CAAC,EACxB,MACH,CAED,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAQ,EAC5DC,EAAcC,EAAMC,EAAOC,EAASC,CAAO,CAC9C,EAAE,GAAI,CACX,CAEA,SAASC,EAAUC,EAAI,CAMnB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASJ,EAAcC,EAAMC,EAAOC,EAASC,EAAS,CAClDjB,EAAS,YAAcoB,EAAeN,CAAI,EAC1Cb,EAAU,YAAcmB,EAAeL,CAAK,EAC5Cb,EAAY,YAAckB,EAAeJ,CAAO,EAChDb,EAAY,YAAciB,EAAeH,CAAO,CACpD,CAEA,SAASG,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}